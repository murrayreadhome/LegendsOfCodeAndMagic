// LegendsOfCodeAndMagic.cpp : Defines the entry point for the application.
//

#include "LegendsOfCodeAndMagic.h"
#include "GameController.h"
#include <chrono>
#include <conio.h>
#include <map>
#include "OldPlayers.h"

using namespace std;

vector<pair<int, Action>> op_actions;

double eval_new_vs_old(const Params& p, int n = 1000)
{
    int new_wins = 0;
    static int seed = int(std::chrono::duration_cast<std::chrono::milliseconds>(chrono::system_clock::now().time_since_epoch()).count());

    for (int i = 0; i < n / 2; i++)
    {
        {
            Player p1(p);
            OldPlayer1 p2(p);
            GameController gc(seed++);
            int winner = gc.play(p1, p2);
            if (winner == 0)
                new_wins++;
        }
        {
            OldPlayer1 p1(p);
            Player p2(p);
            GameController gc(seed++);
            int winner = gc.play(p1, p2);
            if (winner == 1)
                new_wins++;
        }
    }

    return double(new_wins) / n;
}

double eval_params(const Params& a, const Params& b, int n=1000)
{
    int a_wins = 0;
    static int seed = int(std::chrono::duration_cast<std::chrono::milliseconds>(chrono::system_clock::now().time_since_epoch()).count());

    for (int i = 0; i < n/2; i++)
    {
        for (int o = 0; o < 2; o++)
        {
            OldPlayer1 p1(o ? b : a);
            OldPlayer1 p2(o ? a : b);
            if (o == 0)
                p1.draft_algo = 2;
            else
                p2.draft_algo = 2;
            GameController gc(seed++);
            int winner = gc.play(p1, p2);
            if (winner == o)
                a_wins++;
        }
    }

    return double(a_wins) / n;
}

double eval_params(const Params& a, const vector<Params>& b, int n = 1000)
{
    double worst = 1.0;
    for (const Params& op : b)
        worst = min(worst, eval_params(a, op, n));
    return worst;
}

void mutate_params(Params& p, mt19937& re)
{
    do
    {
        size_t ni = sizeof(p.i) / sizeof(int);
        size_t nd = sizeof(p.d) / sizeof(double);
        size_t n = uniform_int_distribution<size_t>(0, ni + nd - 1)(re);
        if (n < ni)
        {
            int& i = reinterpret_cast<int*>(&p.i)[n];
            i += uniform_int_distribution<int>(-2, 2)(re);
            i = max(i, -3);
        }
        else
        {
            n -= ni;
            double& d = reinterpret_cast<double*>(&p.d)[n];
            if (uniform_int_distribution<size_t>(0, 1)(re) == 0)
                d += uniform_real_distribution<double>(-1.0, 1.0)(re);
            else
                d *= exp(uniform_real_distribution<double>(-1.0, 1.0)(re));
        }
    } while (uniform_int_distribution<size_t>(0, 1)(re) == 0);
}

ostream& operator<<(ostream& out, const Params& p)
{
    size_t ni = sizeof(p.i) / sizeof(int);
    size_t nd = sizeof(p.d) / sizeof(double);
    const int* pi = reinterpret_cast<const int*>(&p.i);
    const double* pd = reinterpret_cast<const double*>(&p.d);

    const char* eon = "       \n";
    out << "{{" << endl;
    for (int i = 0; i < ni; i++)
        out << pi[i] << "," << eon[i%8];
    out << "\n},\n{" << endl;
    for (int i = 0; i < nd; i++)
        out << pd[i] << "," << eon[i%8];
    out << "\n}};" << endl;

    return out;
}

void improve_params(Params p, const vector<Params>& vs, int turns=1000)
{
    int seed = int(std::chrono::duration_cast<std::chrono::milliseconds>(chrono::system_clock::now().time_since_epoch()).count());
    mt19937 re(seed);
    double bestSc = eval_params(p, vs, turns);
    size_t n = 1;
    map<size_t, pair<Params, double>> ltBest;
    size_t last_revert = 4;
    double last_revert_sc = bestSc;
    ltBest[last_revert] = { p, bestSc };

    while (!_kbhit())
    {
        Params q = p;
        mutate_params(q, re);
        double scq = 0, tscq = 0;
        size_t qn = 0;
        for (size_t i = 0; i < n; i++)
        {
            tscq += eval_params(q, vs, turns);
            qn++;
            scq = tscq / qn;
            if (scq < bestSc)
                break;
        }
        double scp = eval_params(p, vs, turns);
        bestSc = (bestSc * n + scp) / (n + 1);
        n++;
        cerr << scq << " vs " << bestSc << " / " << n << endl;
        if (scq >= bestSc || (scq + 0.01 >= bestSc && uniform_int_distribution<int>(0, 2)(re) == 0))
        {
            last_revert = 0;
            p = q;
            n = qn;
            if (scq > bestSc)
            {
                cout << "better\n" << q;
                bestSc = scq;
            }
            else
            {
                cout << "try" << endl;
            }
        }

        if (last_revert != 0)
        {
//            cerr << "update " << last_revert << endl;
            ltBest[last_revert].second = bestSc;
        }

        if (n != 0 && (n % 4) == 0)
        {
//            cout << "check best for " << n << endl;
            if (bestSc > ltBest[n].second)
            {
                ltBest[n] = { p, bestSc };
                last_revert = n;
                last_revert_sc = bestSc;
            }
        }

        if (!ltBest.empty() && (bestSc + 0.05 < last_revert_sc || n > 32 || uniform_int_distribution<size_t>(0, 40)(re) == 0))
        {
            size_t r = uniform_int_distribution<size_t>(0, ltBest.size() - 1)(re);
            size_t rn = 4 * (r + 1);
//            cout << "check update" << ltBest.size() << " " << r << " " << rn << endl;
//            for (auto x : ltBest) cout << x.first << "->" << x.second.second << endl;
            last_revert = rn;
            if (bestSc < ltBest[rn].second)
            {
                p = ltBest[rn].first;
                n = rn;
                if (n > 32)
                    n -= 16;
                bestSc = ltBest[rn].second;
                last_revert_sc = bestSc;
                ltBest[rn].second -= 0.001;
                cout << "revert to lt best " << bestSc << " / " << rn << endl;
                cout << p;
            }
        }
    }

    for (const auto& lt : ltBest)
    {
        cout << "n=" << lt.first << " score=" << lt.second.second << endl;
        cout << lt.second.first;
    }
}

void tournament(const vector<Params>& params)
{
    size_t n = params.size();
    vector<double> scores(n, 0);
    for (size_t i = 0; i < n; i++)
    {
        for (size_t j = i + 1; j < n; j++)
        {
            double i_wins = eval_params(params[i], params[j], 10000);
            cout << i << " vs " << j << " " << i_wins << endl;
            scores[i] += i_wins;
            scores[j] += 1.0 - i_wins;
        }
    }

    for (size_t i = 0; i < n; i++)
        cout << i << " " << scores[i]/(n-1) << endl;
}

/* previous invalid
    Params gold32 =
    { {
2, 9, 11, 9, 7, 4, 3, -2,
-3, 0, 4, 5, 2,
},
{
7.73817, 2.91513, 0.42475, 4.77937, -0.826599, 0.691071, 0.729992, -3.01847,
-5.33083, 4.26642, 4.8868, 2.18347, 1.09028, 2.01672, 1.89978, 3.09518,
1.35242, 4.52741, 3.01027, 0.144965, -0.440247, 4.34497, 5.36517, 0,
-4.13682, 0.775486, -2.53257, 0.964975, -2.90551, -3.59518, -2.44149, -1.07429,
2.50147, 0.327159, -2.1511, -2.62134, 4.22959, 1.87049, -2.11927, 0, 0, 0.327159, -2.1511, -2.62134, 4.22959, 1.87049, -2.11927,
} };

    Params prev =
    { {
    -3, 5, 6, 4, 2, 2, -3, -1,
    -1, 0, -1, 2, -4,
    },
    {
    4.79313, 1.17399, 0.424348, 4.70863, -0.796309, 0.0514385, 1.17727, -2.0296,
    1.59741, 0.485915, 0.602749, 0.102713, -2.07307, -1.08749, 0.890888, 1.43694,
    -0.0226625, 0.491488, 0.651959, 0.117335, -1.13037, 1.31927, 1.42461, 0,
    -0.97392, -0.973255, -0.627406, 0, 0.218332, -0.0336394, 4.79313, 1.17399,
    0.424348, -2.0296, 1.59741, 0.485915, 0.602749, 0.102713, -2.07307,
    } };

    Params gold57=
    { {
2, 3, 5, 5, 3, 2, 2, -2,
-5, -2, -1, 0, -2,
},
{
2.69287, 1.93944, 0.218916, 0.954512, -1.04002, 0.99281, 4.60915, -1.16954,
2.53758, 2.43279, 0.635511, 4.82829, 2.74237, 0.634413, -0.941901, 4.66539,
2.1327, -2.81415, 1.3494, 0.174386, -2.43276, 1.75129, 1.93385, 0,
1.97353, 0.584058, 2.94098, -0.893542, 7.60946, 1.6964, 3.13547, 1.5531,
0.703979, -3.93893, -1.93636, -4.59371, 0.132084, 8.15254, -2.93104, 0, 0,  -3.93893, -1.93636, -4.59371, 0.132084, 8.15254, -2.93104,
} };

    Params gold56 =
    { {
-6, 6, 9, 9, 7, 6, 4, 4,
6, -8, 0, 4, -7,
},
{
8.25737, 3.45518, 0.568089, 0.0932142, -1.04358, 0.98962, 8.93013, -0.201248,
0.0830147, 1.89789, 3.23594, 6.99142, 2.3462, -1.91313, 4.03476, 8.45027,
-3.43596, 1.16945, 2.50136, 0.975953, 0.321074, 2.11444, 1.59877, 0,
0.394601, 6.98325, 2.68533, -8.51471, 12.2219, 1.04509, 7.00152, 1.48917,
0.303177, 1.8464, -2.42281, -3.00746, 0.320811, 7.63241, 0.196139, 1.2679,
1.39347, -7.002, -0.217405, -0.640002, 1.04721, 4.44642, 2.53409, -1.544,
2.54769, 2.59733, -3.83357, 2.70376, 1.19074, -0.286425, -0.0729417, -2.06092,
3.54413,
} };
    Params gold31 =
    { {
    7, 6, 12, 10, 10, 8, 6, 4,
    5, -10, -10, 5, -4,
    },
    {
    7.61404, 6.73621, 0.00703978, -0.605314, -1.18427, -25.1146, 0.726403, -0.719495,
    4.99645, 0.130773, 0.244524, 0.974274, 0.0252914, -0.709927, 0.97464, 0.737504,
    -1.5623, -5.09058, -1.53143, 0.224828, -0.0458732, 1.22855, 1.57064, 0,
    2.83786, 4.61971, 0.2521, 2.94954, 15.5086, 3.53728, 0.690261, -1.44891,
    2.04015, -0.983451, -1.55338, 2.19156, 3.15911, 9.07261, -0.884952, 0.727166,
    1.26622, -62.8933, -6.71968, -0.970392, -9.02535, -0.597951, 1.06167, -1.37738,
    3.29726, 9.94, -2.68016, 1.65906, 0.378562, 2.34008, 0.0208961, -1.55224,
    0.236862,
    } };

        Params gold27 = 
    { {
    0, 2, 4, 5, 2, 1, -5, -7,
    -5, -11, -8, -7, -7,
    },
    {
    2.80787, 1.9218, 0.261229, 0.725032, -1.28739, 0.830066, 0.567213, -0.414187,
    1.45776, -0.272006, 0.575817, -0.25395, 2.73163, -0.313109, 3.85514, 0.872998,
    1.56796, 1.64741, 1.14193, -0.157035, 0.0580965, 1.1822, 1.53493, 0,
    0.638911, -1.02047, -0.346689, -0.762542, 19.8183, -1.02183, 1.14937, 0.560557,
    2.94441, -4.74371, -3.15498, -0.573178, 0.0780187, -0.0281649, 3.60422, -0.00324518,
    3.98431, -1.02113, -1.79464, 1.22999, 0.568018, 1.63991, -0.468817, 0.186743,
    6.42454, 14.9243, -0.0170047, 6.03354, -2.36409, -2.46361, -0.550072, -0.497079,
    25.1896, 0, 0.0723614, -0.216477, -0.0144239,
    } };

    Params gold29 =
    { {
    -10, 4, 5, 5, 3, 1, -2, -1,
    0, -1, -1, -6, -5,
    },
    {
    4.48682, 0.814388, 0.937428, 0.954993, -0.945402, 0.790389, 0.299937, 0.652758,
    0.502391, 0.563479, 2.4234, 9.29261, 0.455452, 0.32669, -1.22316, -1.16814,
    -0.808896, -0.43114, -0.0490446, -0.0956106, -0.188912, 0.804913, 1.02183, 0,
    0.472189, 0.34489, 0.125312, -0.414577, -0.0399419, 1.82381, 1.78481, 0.548026,
    1.5848, 0.92391, -1.94682, -2.53886, 1.91067, 21.3365, -0.110678, 1.838,
    3.73184, -3.50746, 6.71453, -4.03034, 0.140442, -0.331771, -1.88739, -0.616496,
    1.07745, 10.1477, -0.689676, 3.07892, -0.110182, 1.23771, 0.262264, -4.02499,
    50.4201, 0.656469, 0.597189, -2.27736, -2.63299,
    } };

    Params gold54 =
    { {
    -3, 3, 4, 3, 2, 2, 2, -1,
    -10, -1, 6, 2, 0,
    },
    {
    5.98064, 3.1375, 0.17387, 0.910113, -1.35529, 1.07784, 0.795772, 0.851223,
    0.93856, 1.73916, -0.80664, 9.39853, 0.91713, -1.2884, 10.1881, 0.0019517,
    0.540373, 4.21818, -1.01121, 0.191074, 0.00711617, 1.41855, 0.987965, 0,
    0.687402, -2.02204, 1.38237, -0.586791, 5.04337, -1.8773, 11.1439, 1.74638,
    0.178762, -0.380358, 4.1251, -2.65884, 2.61246, 1.02642, 2.74289, 0.459122,
    -0.110867, -0.028575, -0.193553, -0.868642, 1.58013, -0.136053, 1.11242, -0.279358,
    -0.235957, 5.32766, 0.888198, 5.86476, -0.322907, 0.229661, 0.238355, 1.19933,
    3.78986, -3.07437, -0.324911, 0.729749, 0.721002,
    } };

    Params gold51 =
    { {
    -2, 4, 7, 6, 4, 3, 2, -2,
    3, -4, -2, 1, -6,
    },
    {
    2.92758, 2.32331, 0.134682, -0.273991, -1.69813, 0.829984, 0.26992, -0.133901,
    1.71969, 1.11473, 1.84153, 6.12891, 0.398056, 0.548613, 0.540899, 0.987937,
    1.26183, 0.798109, -1.785, -0.341254, -2.95235, 2.24935, 3.03517, 0,
    0.669813, -0.595485, -0.861745, 1.08218, 0.537901, -0.29153, -1.23387, 0.148897,
    4.79304, 3.04382, 0.64142, -0.303951, 0.245083, -0.252056, -0.283696, -1.23986,
    0.438194, 0.244324, -0.4476, 1.29697, 0.658796, -0.123863, 0.404009, 0.0259836,
    6.95938, 8.51775, -3.85391, 3.64061, 0.18202, -0.183716, -0.432416, 1.81837,
    15.3711, 0, 0.280258, 6.47732, -4.14558,
    } };

    Params gold26 =
    { {
    1, 4, 6, 5, 3, 2, -9, -1,
    -5, -3, -4, -1, -1,
    },
    {
    4.07268, 2.8635, 0.24436, 0.275285, -0.934957, 0.578424, 0.475535, 0.80735,
    0.970358, -0.38335, 0.0743804, 5.25768, -0.853011, -0.305284, 3.30236, 1.60702,
    -0.254632, 2.10599, 17.7768, 0.0445463, 0.0462376, 1.39809, 1.51758, 0,
    2.03367, -0.481369, -1.4914, 0.131085, 0.148271, -0.377966, 1.62126, 0.362001,
    2.50488, -4.71992, 0.160487, 0.197257, -1.08914, 25.3655, 0.310375, 1.86061,
    1.86515, 0.678516, -15.1084, -2.3648, 0.143622, -0.823574, 1.74447, -2.17074,
    0.85289, 12.7331, -0.441739, 0.727032, 1.34889, -0.0152078, -0.654388, 0.253742,
    3.40774, 0, 0.614939, 4.12959, -1.21714,
    } };

    n=32 score=0.3575
{{
0, 3, 6, 3, 2, 1, 0, 0,
0, 0, 0, 0, 2,
},
{
1.33156, 1.20995, 0.0823133, 0.436361, -0.824659, 0.538631, 1.42712, 0,
0.090013, 0.298455, 0.916628, 4.87067, 4.12148, 0, 0, 0.887723,
0.295468, -0.253688, -0.224451, -0.189717, -1.5929, 1.37058, 1.84993, 0,
-0.303349, 0, -0.55476, 0.466146, 1.79495, -0.177703, -0.176048, 1.19587,
2.58625, -1.02749, 0.0230167, -0.0476957, -4.77719, 0.451169, 0.46138, 0.0716496,
0.0287992, -0.723368, 0.161364, -0.935968, 0.70841, -0.676893, 0.740992, -0.960108,
8.96607, 1.01032, -1.78871, 1.45603, -1.11631, -0.0825827, -0.241482, -0.0831851,
2.02415, 0, 0.720732, 0.165928, -0.122497, -1.11179, -1.38456, 0.736898,
1.58438,
}};

    { {
    0, 3, 9, 6, 4, 4, 5, 1,
    4, 0, 1, 0, 0,
    },
    {
    5.72666, 3.03108, 0.135674, -0.452248, -1.8397, 0.358403, 2.56334, -1.83135,
    -0.495158, -0.823284, -1.21364, 11.3039, 0.966284, -0.589043, 0.419549, 1.50962,
    -0.332837, 1.56862, 0.398995, -0.291276, -0.0228147, 1.45723, 1, 0,
    -2.03206, -0.118646, 3.53402, 4.79125, 2.04399, -0.147566, 2.15471, 0.936941,
    1.78105, -0.205892, -0.77011, -8.29354, -0.0753782, 22.2103, 1.65034, -0.432163,
    -0.975238, -5.0488, 0.445745, -0.53293, -1.57655, -1.50115, 1.42205, -1.71588,
    0.148136, 3.13402, -6.40185, 1.89099, 0.470481, -0.303492, -8.04171, -2.79726,
    3.43199, -0.396459, 0.663297, 2.47792, -0.952891, -0.273615, -10.7187, -1.28534,
    0.202453,
    } };

*/

int main()
{
    Params gold9 =
    { {
    1, 4, 6, 5, 3, 2, -11, -1,
    -1, -5, -3, -1, -1,
    },
    {
    4.07268, 2.8635, 0.24436, 0.275285, -0.934413, 0.578424, 0.368178, 0.324054,
    0.970358, -1.14051, 0.0743804, 4.39096, -1.6284, 0.554772, 3.12684, 1.88235,
    -0.0194372, 2.47201, 6.24481, 0.0275378, 0.0462376, 1.39809, 1.51758, 0,
    2.26445, -0.481369, -2.25398, 0.319278, -0.418014, -0.492748, 2.2012, 0.554911,
    1.884, -4.71992, 0.414974, -0.71358, -1.08914, 26.1421, 0.310375, 7.17221,
    2.37614, 0.588487, -7.20572, -1.66024, 0.957726, -1.06389, 1.16537, -1.97045,
    2.57761, 12.7331, -0.441739, 1.1968, 1.0257, -0.239832, -0.884526, 0.87699,
    3.40774, 0, 0.198644, 3.98853, -1.21714,
    } };

    Params gold2 =
    { {
    -5, 3, 5, 4, 2, -1, -13, 1,
    -5, -7, 5, -12, -4,
    },
    {
    4.73095, 2.68304, 0.236421, 0.717338, -1.03961, 0.883133, 0.0994785, 1.18619,
    2.16072, 2.70415, 0.693665, 17.6778, 11.3714, -0.958515, -2.40779, 3.2706,
    -0.790726, -2.26678, -1.96172, 0.152949, 0.0641518, 2.30234, 2.53189, 0,
    -1.63735, 0.337842, -0.468753, -0.299272, -1.83165, -1.70411, 4.95859, 1.15357,
    0.352331, -1.48017, 0.215066, -3.63714, -0.73088, 107.654, 12.4766, 2.23271,
    -0.0201277, 2.25825, -3.23735, -0.690174, -2.29374, -3.93088, -1.13206, -0.90098,
    4.96106, 8.88133, -3.21313, 2.45326, -0.213814, 0.12347, -6.4973, 5.5528,
    5.10403, 0.357561, 2.78479, -0.42423, 0.751112, 0.499989, -4.67846,
    } };

    Params gold2b =
    { {
    -6, 4, 6, 5, 3, 3, 2, 2,
    0, -1, -1, 2, -8,
    },
    {
    4.06207, 2.03524, 0.0841488, 0.452104, -1, -2.48791, 0.0521824, -1.83897,
    0.296102, 2.59306, 0.347211, 16.0734, 10.7129, -1.02896, 1.38201, 1.74293,
    0.118754, 4.87799, -0.0208954, -0.145531, 0.190254, 2.04928, 2.38476, 0,
    0.34711, -0.447726, 0.459148, 0.601652, 1.03895, 0.172126, 1.44974, 0.573184,
    1.18672, -1.08429, 0.892135, -1.70675, 3.10331, 141.276, 74.8257, 0.885351,
    8.54586, 0.41823, 0.233728, -0.12302, -0.460249, 1.15114, 0.28792, -1.1334,
    2.11415, 9.90068, 2.76794, 3.53121, -4.14335, 0.793132, -0.0690288, 4.47708,
    3.21989, 0.0461234, 0.204016, -0.152393, 0.949387, -2.95691, -1.19392,
    } };

    Params gold2x =
    { {
    -1, 6, 13, 7, 1, 4, -2, 11,
    4, 7, 5, 6, 3,
    },
    {
    3.78176, 2.27847, 0.0166833, -0.980151, -0.947445, 33.5404, 17.4131, 0.00479656,
    1.1096, 0.923549, 1.22567, 10.3015, 8.27899, -3.49226, -0.282961, -1.45265,
    3.82426, 0.0540937, 0.00763259, 0.0327861, 0.00549592, 1.93033, 1.91819, 0,
    1.12176, -1.1315, -0.418995, -2.43871, 5.73248, 0.100988, -0.240722, 10.4513,
    -4.53145, 0.105382, -0.0103765, 0.232206, 0.248822, -2.08133, 15.6741, 1.39542,
    5.80601, -0.377957, 5.79562, 0.284378, -0.378682, -3.7905, -1.57748, 6.4282,
    32.0869, -5.32061, -3.17495, 0.123833, -2.29089, -20.4795, 3.29916, 2.7536,
    19.8089, -0.308248, 0.047914, -5.21434, -0.216936, 10.8521, 0.199783, -71.4011,
    -0.345507, 2.31589, 4.9958, 2.46491, -43.7672, -1.59307, 2.53636, 19.8707,
    2.4879, 2.5923, -0.752065, 2.3802, -0.837277, 1.09837, -2.16702, 0.618754,
    0.626427, 2.54622, 5.85363, 2.76393, -2.39719, 1.37376, -0.0185826, 0.612887,
    -0.128077, 78.5252, 0.756394, -49.2859, 0.366425, 3.60823, 1.15797, 0.279169,
    8.3679, 1.26423, 1.83058, -0.826833, 0.140494, 5.16522, -1.03971, 0.211041,
    -1.01487, -1.10138, -2.82287, -0.0688443, 5.99569, -0.494972, -0.273572, -6.34909,
    14.4817, 8.25746, 1.91974, 20.1423, 6.07051, 5.70523, 15.6083, -9.75033,
    -0.476484, -5.7269, -8.19008, 1.04576, -2.18714, -0.392844, 0.382633, -12.9847,
    2.55248, 14.7595, 2.92896, 10.0129, 21.9328, 87.4715, 4.63391, -3.00938,
    0.129781, 3.54199, 0.179876, 15.6458, -1.43098, -1.39347, 0.316109, 1.93974,
    5.01447, 4.05324, 3.12896, -0.759691, -1.15703, 1.38218, -1.12143, -8.25107,
    -1.85438, -0.839096, -15.9068, 2.13183, -7.70588, 1.59563, 0.385365, 5.09804,
    3.56938, -1.05118, 0.331022, 4.73971, -2.97385, -0.121908, -0.534561, 3.31087,
    1.23518, 0.790702, -0.122157, -1.65914, 2.11437, 1.10963, -14.8114, 1.40025,
    0.593086, -1.32683, 5.01998, -147.723, 8.85197, -2.06003, 1.31133, 0.763284,
    -3.80368, 0.771437, -0.885968, -1.03139, -3.54288, 0.329537, -4.26409, -0.738415,
    -8.38251, 0.404535, -110.257, -0.130707, -0.78001, 0.00559426, -1.09502, -7.4394,
    -2.36929, -5.58205, -5.52112, 1.2887, -3.89651, -27.0482, 0.944629, -1.48408,
    2.33833, -0.812411, -0.982722, 3.59921, 2.15339, -0.378168, -0.954943, -9.22712,
    3.02106, -2.26208, -0.0931685, 0.0191906, -14.5982, -0.0606538, -1.01998, -1.93773,
    -3.55546,
    } };

    Params current =
    { {
    1, 14, 12, 7, 5, 9, 6, 5,
    8, 0, 9, 4, 5,
    },
    {
    1.9126, 1.01065, 0.0133081, -0.257122, -1.97861, 0.090774, -0.000518277, 0.756139,
    0.3945, 0.254544, 1.74881, 4.71799, 4.15312, -0.549148, -1.4448, -0.659854,
    0.417176, -3.13264, -3.12548, 1.26303, 0.0583759, 3.84014, 3.19588, 0,
    -0.00517459, 0.766206, 1.35013, 0.136338, 3.66802, 0.672224, 0.999158, 0.181885,
    3.36018, 2.36357, 0.508944, -1.22176, -0.386138, 161.441, 2.30377, 0.969805,
    4.15555, -1.75008, -5.44821, -0.517519, 0.708991, 0.592979, -2.56522, -1.74515,
    1.51134, 1.53528, -10.2309, 0.82348, -1.1121, 0.333685, -1.56591, -0.418046,
    9.28197, -0.907473, 0.914687, -3.88126, -0.551918, 1.09128, 3.73259, 3.10934,
    0.422895, 2.69616, -0.960519, 0.855135, -0.390251, -1.66752, 1.51184, 19.4598,
    9.53077, -0.177301, 0.121765, 0.40233, 3.62081, 0.14962, -3.8562, 0.494774,
    -3.6619, -1.00387, 0.403286, 0.87206, -5.58355, -1.34171, -1.63078, -0.860115,
    -5.23411, 2.64181, 1.44241, -1.37042, 2.62495, 0.487056, -0.515178, -0.262506,
    1.08647, 0.600689, -12.8397, -0.765497, -0.614037, -0.00262793, -0.00154215, 16.6141,
    0.0698199, 0.353338, -0.0374643, -5.16634, 0.478864, 0.734497, -0.67507, -0.630223,
    3.81669, 7.55396, 0.14169, 1.21379, 0.662007, 0.968057, 1.57212, 0.445701,
    0.386428, -0.654364, 0.195196, -1.75787, 0.436392, 0.508293, -1.55221, -0.591092,
    85.8689, 108.781, 11.5537, 7.61473, 3.19413, 0.155197, 0.684983, -0.944036,
    2.93019, -0.225332, -1.42486, 0.00611008, -134.733, 0.890322, 0.660987, -6.13397,
    -0.0564621, 7.16407, 0.834698, 4.58404, -0.0976745, 0.466171, -3.94309, -0.0169475,
    0.214987, -2.13798, -1.32294, -0.29209, 0.978272, -0.350162, 0.6582, 26.5653,
    -2.87365, 0.0955646, -0.216037, 4.99519, 0.681051, 0.379595, -0.519191, 0.479137,
    -4.05817, -0.104601, 0.724149, -0.234869, -3.09742, 0.106105, -0.355098, 0.331496,
    0.61338, -19.1829, -3.38703, 0.267291, -0.669503, 3.31484, 0.324757, 1.02,
    -0.105862, 0.653078, -6.55797, -2.82732, -2.00393, -1.31748, 0.32441, 0.528257,
    0.217217, 0.401881, 0.201771, 2.47465, 0.813215, 1.03398, 1.51806, 0.796211,
    -4.08375, -2.95005, -2.00994, 7.52041, -1.32758, 0.351613, -0.775538, 0.343049,
    1.31524, 1.61223, 1.54757, -0.620523, 2.75395, 0.125685, 4.56488, 1.32227,
    2.36804, -21.2201, -0.600379, 0.74965, 0.650043, -0.898904, 3.53424, 0.334797,
    -6.09555,
    } };

    improve_params(current, { gold2b }, 1000);
    //tournament({ gold27, gold29, gold54, gold51, gold26, current });
    //cout << eval_new_vs_old(gold2, 10000) << endl;
	return 0;
}
